---
title: "Linear models: miscellanea"
subtitle: "Statistics III - CdL SSE"
author: "[Tommaso Rigon]{.orange}"
institute: "_Universit√† degli Studi di Milano-Bicocca_"
page-layout: full
bibliography: ../biblio.bib
citeproc: true
csl: https://www.zotero.org/styles/journal-of-the-american-statistical-association
reference-location: margin
execute:
  cache: false
filters: 
  - remove-pause.lua
format:
  revealjs:
    auto-stretch: true
    center: true
    html-math-method: katex
    transition: none
    output-file: un_A_slides.html
    slide-number: true
    callout-appearance: minimal
    code-line-numbers: true
    theme: [default, ../template.css] # alternative themes (subset): default, night, dark
    embed-resources: false
    echo: false
    fig-dpi: 250
    # incremental: true  # Remove comment if you like incremental bullet points
    logo: img/logoB.png
    footer: "[Home page](https://tommasorigon.github.io/datamining)"
  html:
    html-math-method: katex
    echo: false
    callout-appearance: minimal
    theme: [simplex, ../template.css]
    toc: true
    toc-title: Table of contents
    embed-resources: false
    smooth-scroll: true
    fig-dpi: 250
editor: 
  markdown: 
    wrap: 72
editor_options: 
  chunk_output_type: console
---

## [Homepage](../index.html)

```{r}
#| warning: false
#| echo: false
#| include: false
#| message: false
#| purl: false

# Please ignore this chunk
knitr::purl("un_A.qmd", output = "../code/un_A.R", documentation = 0)
styler:::style_file("../code/un_A.R")
```

::: columns
::: {.column width="40%"}
![](img/ABC.png) *"Everything should be made as simple as possible, but
not simpler"*

Attributed to [Albert Einstein]{.grey}
:::

::: {.column width="60%"}
-   This unit will cover the following [topics]{.orange}:

    - Recap: linear models and the modeling process
    - Box-Cox transform, variance stabilizing transformations
    - Robustness of OLS estimates
    - Weighted least squares, sandwich estimators

-   A few [aspects]{.blue} of linear models will be novel to
    most of you...

-   ... but you should be already [very familiar]{.orange} with linear
    models!
:::
:::

# Old friends: linear models

## Car data ([diesel]{.blue} or [gas]{.orange})

::: columns
::: {.column width="50%"}
```{r}
#| warning: false
#| message: false
#| fig-width: 5
#| fig-height: 4.5
library(tidyverse)
library(broom)
library(knitr)
library(ggplot2)
library(GGally)
library(ggthemes)

rm(list = ls())
# The dataset can also be downloaded here: https://tommasorigon.github.io/datamining/data/auto.txt
auto <- read.table("../data/auto.txt", header = TRUE) %>% select(city.distance, engine.size, n.cylinders, curb.weight, fuel)

p0 <- ggpairs(auto,
  columns = 1:4, aes(colour = fuel),
  lower = list(continuous = wrap("points", size = 0.5)),
  upper = list(continuous = wrap("points", size = 0.5)),
  diag = "blank"
) +
  theme_light() +
  scale_color_tableau(palette = "Color Blind") +
  xlab("") +
  ylab("")
p0
```
:::

::: {.column width="50%"}
-   We consider data for $n = 203$ models of cars in circulation in 1985
    in the USA.
-   We want to [predict]{.blue} the distance per unit of fuel as a
    function of the vehicle features.
-   We consider the following [variables]{.orange}:
    -   The city distance per unit of fuel (km/L, `city.distance`)
    -   The engine size (L, `engine.size`)
    -   The number of cylinders (`n.cylinders`)
    -   The curb weight (kg, `curb.weight`)
    -   The fuel type (gasoline or diesel, `fuel`).
:::
:::

## Linear regression

::: columns
::: {.column width="40%"}
```{r}
#| fig-width: 4
#| fig-height: 3.7
ggplot(data = auto, aes(x = engine.size, y = city.distance, col = fuel)) +
  geom_point() +
  theme_light() +
  scale_color_tableau(palette = "Color Blind") +
  theme(legend.position = "top") +
  xlab("Engine size (L)") +
  ylab("Urban distance (km/L)")
```
:::

::: {.column width="60%"}
-   Let us consider the variables `city.distance` ($y$), `engine.size`
    ($x$) and `fuel` ($z$).

-   A [simple linear regression]{.blue} $$
    Y_i = \beta_1 + \beta_2 x_i + \epsilon_i, \qquad i=1,\dots,n,
    $$ could be easily fit by least squares...

-   ... but the plot suggests that the relationship between
    `city.distance` and `engine.size` is [not]{.orange} well
    approximated by a [linear]{.orange} function.

-   ... and also that `fuel` has a non-negligible effect on the
    response.
:::
:::

## Regression models

::: incremental
-   A [general]{.orange} and [more flexible formulation]{.orange} for
    modeling the relationship between a vector of [fixed
    covariates]{.blue}
    $\bm{x}_i = (x_{i1},\dots,x_{ip})^T \in \mathbb{R}^p$ and a random
    variable $Y_i \in \mathbb{R}$ is $$
    Y_i = f(\bm{x}_i; \beta) + \epsilon_i, \qquad i=1,\dots,n,
    $$ where the "errors" $\epsilon_i$ are iid random variables, having
    zero mean and variance $\sigma^2$.

-   To estimate the unknown parameters $\beta$, a possibility is to rely
    on the [least squares criterion]{.blue}: we seek the
    [minimum]{.orange} of the objective function $$
    D(\beta) = \sum_{i=1}^n\{y_i - f(\bm{x}_i; \beta)\}^2,
    $$ using $n$ pairs of covariates
    $\bm{x}_i = (x_{i1},\dots,x_{ip})^T$ and the observed realizations
    $y_i$ of the random variables $Y_i$, for $i = 1,\dots,n$. The
    [optimal value]{.orange} is denoted by $\hat{\beta}$.

-   The [predicted values]{.blue} are
    $\hat{y}_i = \mathbb{E}(Y_i) = f(\bm{x}_i; \hat{\beta})$, for
    $i=1,\dots,n.$
:::

## Linear models

-   Let us consider again the variables `city.distance` ($y$),
    `engine.size` ($x$) and `fuel` ($z$).

-   Which function $f(x,z;\beta)$ should we choose?

. . .

-   A first attempt is to consider a [polynomial term]{.orange} combined
    with a [dummy variable]{.blue} $$
    f(x, z; \beta) = \beta_1 + \beta_2 x + \beta_3 x^2 + \beta_4 x^3 + \beta_5 I(z = \texttt{gas}),
    $$ which is a special instance of [linear model]{.orange}.

. . .

::: callout-note
#### Definition (Linear model)

In a [linear model]{.blue} the response variable $Y_i$ is related to the
covariates through the function$$
    \mathbb{E}(Y_i) =f(\bm{x}_i; \beta) = \beta_1 x_{i1} + \cdots + \beta_p x_{ip} =\bm{x}_i^T\beta,
    $$ where $\bm{x}_i = (x_{i1},\dots,x_{ip})^T$ is a vector of
[covariates]{.orange} and $\beta = (\beta_1,\dots,\beta_p)^T$ is the
corresponding vector of [coefficients]{.orange}.
:::

## Matrix notation

-   The [response random variables]{.orange} are collected in the random
    vector $\bm{Y} = (Y_1,\dots,Y_n)^T$, whose [observed
    realization]{.blue} is $\bm{y} = (y_1,\dots,y_n)^T$.

-   The [design matrix]{.blue} is a $n \times p$ matrix, comprising the
    covariate's values, defined by $$
    \bm{X} = 
    \begin{bmatrix} 
    x_{11} & \cdots & x_{1p}\\
    \vdots & \ddots & \vdots \\
    x_{n1} & \cdots & x_{np}
    \end{bmatrix}.
    $$

. . .

-   The $j$th variable (column) is denoted with $\tilde{\bm{x}}_j$,
    whereas the $i$th observation (row) is $\bm{x}_i$: $$
    \bm{X} = (\tilde{\bm{x}}_1,\dots,\tilde{\bm{x}}_p) = (\bm{x}_1, \dots,\bm{x}_n)^T.
    $$

. . .

-   Then, a [linear model]{.blue} can be written using the [compact
    notation]{.orange}: $$
    \bm{Y} = \bm{X}\beta + \bm{\epsilon},
    $$ where $\bm{\epsilon} = (\epsilon_1,\dots,\epsilon_n)^T$ is a
    vector of iid error terms with zero mean and variance $\sigma^2$.

## Linear regression: estimation I

-   The optimal set of coefficients $\hat{\beta}$ is the minimizer of
    the [least squared criterion]{.orange} $$
    D(\beta) = (\bm{y} - \bm{X}\beta)^T(\bm{y} - \bm{X}\beta) = ||\bm{y} - \bm{X}\beta||^2,
    $$ also known as [residual sum of squares (RSS)]{.orange}, where $$
    ||\bm{y}|| = \sqrt{y_1^2 + \cdots + y_n^2},$$ denotes the [Euclidean
    norm]{.blue}.

. . .

::: callout-note
#### Least square estimate (OLS)

If the design matrix has [full rank]{.blue}, that is, if
$\text{rk}(\bm{X}^T\bm{X}) = p$, then the [least square
estimate]{.orange} has an explicit solution: $$
    \hat{\beta} = (\bm{X}^T\bm{X})^{-1}\bm{X}^T \bm{y}.
    $$
:::

## Linear regression: estimation II

-   In matrix notation, the predicted values can be obtained as $$
    \hat{\bm{y}} = \bm{X}\hat{\beta} = \bm{H}\bm{y}, \qquad \bm{H} = \bm{X}(\bm{X}^T\bm{X})^{-1}\bm{X}^T.
    $$

-   $\bm{H}$ is a $n \times n$ [projection matrix]{.orange} matrix
    sometimes called [hat matrix]{.blue}.

-   It can be shown that $\text{tr}(\bm{H}) = \text{rk}(\bm{H}) = p$.
    Moreover, it holds $\bm{H} = \bm{H}^T$ and $\bm{H}^2 = \bm{H}$.

. . .

-   The quantity $D(\hat{\beta})$ is the so-called [deviance]{.blue},
    which is equal to $$
    D(\hat{\beta}) = ||\bm{y} - \hat{\bm{y}}||^2 = \bm{y}^T(I_n - \bm{H})\bm{y}.
    $$

-   Moreover, a typical estimate for the [residual variance]{.orange}
    $\sigma^2$ is obtained as follows: $$
    s^2 = \frac{D(\hat{\beta})}{n - p} = \frac{1}{n-p}\sum_{i=1}^n(y_i - \bm{x}_i^T\hat{\beta})^2.
    $$

## Linear regression: inference

-   Let us additionally assume that the errors follow a Gaussian
    distribution:
    $\epsilon_i \overset{\text{iid}}{\sim} N(0, \sigma^2)$.

-   This implies that the [distribution]{.orange} of the
    [estimator]{.orange} $\hat{\beta}$ is $$
    \hat{\beta} \sim \text{N}_p(\beta, \sigma^2 (\bm{X}^T\bm{X})^{-1}).
    $$

-   Hence, the estimator $\hat{\beta}$ is [unbiased]{.orange} and its
    [variance]{.blue} can be estimated by $$
    \widehat{\text{var}}(\hat{\beta}) = s^2 (\bm{X}^T\bm{X})^{-1}.
    $$

-   The [standard errors]{.orange} of the components of $\hat{\beta}$
    correspond to the square root of the diagonal of the above
    covariance matrix.

. . .

-   Confidence interval and Wald's tests can be obtained through
    classical inferential theory.

. . .

-   Ok, we are ready to get back to the original problem...

## Car data, a first model

-   Our first attempt for predicting `city.distance` ($y$) via
    `engine.size` ($x$) and `fuel` ($z$) is: $$
      f(x, z; \beta) = \beta_1 + \beta_2 x + \beta_3 x^2 + \beta_4 x^3 + \beta_5 I(z = \texttt{gas}).
      $$

-   Indeed, by looking at the plot of the data, it is plausible that we
    need a [polynomial]{.orange} of degree $3$ or $4$

-   It is also clear from the plot that `fuel` is a relevant variable.
    Categorical variables are [encoded]{.orange} using [indicator
    variables]{.blue}.

. . .

-   To evaluate the goodness of fit, we can calculate the [coefficient
    of determination]{.orange}: $$
    R^2 = 1 - \frac{\text{(``Residual deviance'')}}{\text{(``Total deviance'')}} = 1 - \frac{\sum_{i=1}^n (y_i - \hat{y}_i)^2}{\sum_{i=1}^n(y_i - \bar{y})^2}.
    $$

## A first model: estimated coefficients

-   We obtain the following [summary]{.orange} for the regression
    coefficients $\hat{\beta}$.

```{r}
#| output: false
m1 <- lm(city.distance ~ engine.size + I(engine.size^2) + I(engine.size^3) + fuel, data = auto)
kable(tidy(m1, conf.int = FALSE), digits = 3)
```

| term            | estimate | std.error | statistic | p.value |
|:----------------|---------:|----------:|----------:|--------:|
| `(Intercept)`   |   28.045 |     3.076 |     9.119 |   0.000 |
| `engine.size`   |  -10.980 |     3.531 |    -3.109 |   0.002 |
| `engine.size^2` |    2.098 |     1.271 |     1.651 |   0.100 |
| `engine.size^3` |   -0.131 |     0.139 |    -0.939 |   0.349 |
| `fuel_gas`      |   -3.214 |     0.427 |    -7.523 |   0.000 |

-   Moreover, the coefficient $R^2$ and the residual standard deviation
    $s$ are:

```{r}
kable(glance(m1)[c(1, 3, 10)])
```

## A first model: fitted values

```{r}
#| fig-width: 7.8
#| fig-height: 4.55
#| fig-align: center
augmented_m1 <- augment(m1)
ggplot(data = augmented_m1, aes(x = engine.size, y = city.distance, col = fuel)) +
  geom_point() +
  geom_line(aes(y = .fitted)) +
  theme_light() +
  theme(legend.position = "right") +
  scale_color_tableau(palette = "Color Blind") +
  xlab("Engine size (L)") +
  ylab("Urban distance (km/L)")
```

## A first model: graphical diagnostics

```{r}
#| fig-width: 7.8
#| fig-height: 4.55
#| fig-align: center
ggplot(data = augmented_m1, aes(x = .fitted, y = .resid, col = fuel)) +
  geom_point() +
  geom_hline(aes(yintercept = 0), linetype = "dotted") +
  theme_light() +
  theme(legend.position = "right") +
  scale_color_tableau(palette = "Color Blind") +
  xlab("Fitted values") +
  ylab("Residuals")
```

## Comments and criticisms

-   Is this a good model?

-   The overall fit [seems satisfactory]{.blue} at first glance,
    especially if we aim at predicting the urban distance of cars when
    average engine size (i.e., between $1.5L$ and $3L$).

. . .

-   However, the plot of the [residuals]{.orange}
    $r_i = y_i - \hat{y}_i$ suggests that the homoscedasticity
    assumption, i.e. $\text{var}(\epsilon_i) = \sigma^2$, might be
    violated.

. . .

-   Also, this model is unsuitable for [extrapolation]{.orange}. Indeed:

    -   It has no grounding in physics or engineering, leading to
        difficulties when interpreting the trend and to paradoxical
        situations.
    -   For example, the curve of the set of gasoline cars shows a local
        minimum around $4.6 L$ and then rises again!

-   It is plausible that we can find a better one, so what's next?

## Linear models and non-linear patterns

-   A significant advantage of linear models is that they can describe
    non-linear relationships via [variable transformations]{.blue} such
    as polynomials, logarithms, etc.

. . .

-   This gives the statistician a lot of modeling flexibility. For
    instance, we could let: $$
    \log{Y_i} = \beta_1 + \beta_2 \log{x_i} + \beta_3 I(z_i = \texttt{gas}) + \epsilon_i, \qquad i=1,\dots,n.
    $$

. . .

-   This specification is [linear in the parameters]{.orange}, it fixes
    the domain issues, and it imposes a monotone relationship between
    engine size and consumption.

. . .

```{r}
#| output: false
m2 <- lm(log(city.distance) ~ I(log(engine.size)) + fuel, data = auto)
kable(tidy(m2, conf.int = FALSE), digits = 3)
```

| term               | estimate | std.error | statistic | p.value |
|:-------------------|---------:|----------:|----------:|--------:|
| `(Intercept)`      |    3.060 |     0.047 |    64.865 |       0 |
| `log(engine.size)` |   -0.682 |     0.040 |   -17.129 |       0 |
| `fuel_gas`         |   -0.278 |     0.038 |    -7.344 |       0 |

## Second model: fitted values

```{r}
#| fig-width: 7.8
#| fig-height: 4.55
#| fig-align: center
augmented_m2 <- augment(m2, data = auto)
ggplot(data = augmented_m2, aes(x = engine.size, y = city.distance, col = fuel)) +
  geom_point() +
  geom_line(aes(y = exp(.fitted))) +
  theme_light() +
  theme(legend.position = "right") +
  scale_color_tableau(palette = "Color Blind") +
  xlab("Engine size (L)") +
  ylab("Urban distance (km/L)")
```

## Second model: graphical diagnostics

```{r}
#| fig-width: 7.8
#| fig-height: 4.55
#| fig-align: center
ggplot(data = augmented_m2, aes(x = .fitted, y = .resid, col = fuel)) +
  geom_point() +
  geom_hline(aes(yintercept = 0), linetype = "dotted") +
  theme_light() +
  theme(legend.position = "right") +
  scale_color_tableau(palette = "Color Blind") +
  xlab("Fitted values") +
  ylab("Residuals")
```

## Comments and criticisms

-   The [goodness of fit]{.blue} indices are the following:

```{r}
r.squared.original <- 1 - sum(mean((auto$city.distance - exp(predict(m2)))^2)) / sum(mean((auto$city.distance - mean(auto$city.distance))^2))
kable(data.frame(r.squared.original = r.squared.original, glance(m2)[c(1, 3, 10)]))
```

-   Do not mix [apple]{.blue} and [oranges]{.orange}! Compare $R^2$s
    only if they refer to the same scale!

. . .

-   This second model is [more parsimonious]{.blue}, and yet it reaches
    satisfactory predictive performance.

-   It is also more coherent with the nature of the data: the
    predictions cannot be negative, and the relationship between engine
    size and the consumption is monotone.

-   Yet, there is still some heteroscedasticity in the residuals --- is
    this is due to a missing covariate that has not been included in the
    model?

## A third model: additional variables

-   Let us consider [two additional variables]{.blue}: `curb.weight`
    ($w$) and `n.cylinders` ($v$).

-   A richer model, therefore, could be: $$
    \log{Y_i} = \beta_1 + \beta_2 \log{x_i} +  \beta_3 \log{w_i} + \beta_4 I(z_i = \texttt{gas}) + \beta_5 I(v_i = 2) + \epsilon_i,
      $$ for $i=1,\dots,n$. The estimates are:

. . .

```{r}
#| output: false
auto$cylinders2 <- factor(auto$n.cylinders == 2)
m3 <- lm(log(city.distance) ~ I(log(engine.size)) + I(log(curb.weight)) + fuel + cylinders2, data = auto)
kable(tidy(m3, conf.int = FALSE), digits = 3)
```

| term               | estimate | std.error | statistic | p.value |
|:-------------------|---------:|----------:|----------:|--------:|
| `(Intercept)`      |    9.423 |     0.482 |    19.549 |   0.000 |
| `log(engine.size)` |   -0.180 |     0.051 |    -3.504 |   0.001 |
| `log(curb.weight)` |   -0.943 |     0.072 |   -13.066 |   0.000 |
| `fuel_gas`         |   -0.353 |     0.022 |   -15.934 |   0.000 |
| `cylinders2_TRUE`  |   -0.481 |     0.052 |    -9.301 |   0.000 |

## A third model: graphical diagnostics

```{r}
#| fig-width: 7.8
#| fig-height: 4.55
#| fig-align: center
augmented_m3 <- augment(m3, data = auto)
ggplot(data = augmented_m3, aes(x = .fitted, y = .resid, col = fuel)) +
  geom_point() +
  geom_hline(aes(yintercept = 0), linetype = "dotted") +
  theme_light() +
  theme(legend.position = "right") +
  scale_color_tableau(palette = "Color Blind") +
  xlab("Fitted values") +
  ylab("Residuals")
```

## Comments and criticisms

-   The goodness of fit greatly [improved]{.blue}:

```{r}
r.squared.original <- 1 - sum(mean((auto$city.distance - exp(predict(m3)))^2)) / sum(mean((auto$city.distance - mean(auto$city.distance))^2))
kable(data.frame(r.squared.original = r.squared.original, glance(m3)[c(1, 3, 10)]))
```

-   In this third model, we handled the [outliers]{.orange} appearing in
    the residual plots, which it turns out are identified by the group
    of cars having 2 cylinders.

-   The diagnostic plots are also very much improved, although still not
    perfect.

-   The estimates are coherent with our expectations, based on common
    knowledge. Have a look at the textbook (A&S) for a detailed
    explanation of $\beta_4$!

-   The car dataset is available from the textbook (A&S) website:

    -   Dataset <http://azzalini.stat.unipd.it/Book-DM/auto.dat>
    -   Variable description
        <http://azzalini.stat.unipd.it/Book-DM/auto.names>
        
# Limitations and simple solutions

## The assumptions of a linear model

:::callout-tip
Let us recap the classical assumptions of a linear model:

  - **(A.1)** [Linear structure]{.blue}, namely $\bm{Y} = \bm{X}\beta + \bm{\epsilon}$ with $\mathbb{E}(\bm{\epsilon}) = 0$, implying $\mathbb{E}(\bm{Y}) = \bm{X}\beta$. [^err1] 
  
  - **(A.2)** [Homoschedasticity]{.orange} and [uncorrelation]{.orange} of the errors, namely $\text{var}(\bm{\epsilon}) = \sigma^2 I_n$.
  
  - **(A.3)** [Gaussianity]{.grey}, namely $\bm{\epsilon} \sim \text{N}_n(0, \sigma^2 I_n)$. In other words, the errors $\epsilon_i \overset{\text{iid}}{\sim}N(0, \sigma^2)$ are iid Gaussian random variables with zero mean and variance $\sigma^2$.

It is also commonly asked that $\text{rk}(\bm{X}) = p$, otherwise the model is not identifiable.
:::

- The above assumptions are often taken a little bit [too seriously]{.blue}. Before moving to GLMs, it is useful to review the implications of each assumption, and a few simple solutions.

- For example, if **(A.1)**-**(A.2)** are valid but  **(A.3)** is not, then the OLS estimate will still "work".

- Even if the data are [heroschedastic]{.orange} the OLS estimator is still a very reasonable choice, but we need to "correct" the standard errors to account for that. 

[^err1]: If the intercept is included in $\bm{X}$, the errors automatically satisfy the property $\mathbb{E}(\bm{\epsilon}) = 0$.

# Variable transformations

## Non-linear transformations

## Variance stabilizing transformations

## Box-Cox transform

# Robustness of OLS estimator

# Weighted least squares

